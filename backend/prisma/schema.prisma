// This is your Prisma schema file for Inventory & Finance Management System
// Using PostgreSQL via Supabase

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USER & ACCESS MANAGEMENT ====================

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  password          String    // Hashed
  fullName          String
  email             String?   @unique
  phone             String?
  isActive          Boolean   @default(true)
  lastLogin         DateTime?
  
  // Relationships
  roleId            String
  role              Role      @relation(fields: [roleId], references: [id])
  
  // Audit
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  
  // Activity tracking
  stockEntries      Item[]    @relation("CreatedByUser")
  handovers         Item[]    @relation("HandoverByUser")
  invoicesCreated   Invoice[] @relation("CreatedByUser")
  paymentsRecorded  Payment[] @relation("RecordedByUser")
  
  @@index([roleId])
  @@index([deletedAt])
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique // "Inventory Operator", "Financial + Inventory Operator"
  description String?
  
  // Permissions (JSON array of permission strings)
  permissions Json      // ["inventory.view", "inventory.edit", "finance.view", etc.]
  
  users       User[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ==================== PRODUCT CATALOG ====================

model ProductCategory {
  id          String    @id @default(uuid())
  name        String    @unique // "Lithium Battery", "Rectifier Module", etc.
  code        String    @unique // "LB", "RM", etc. for serial number generation
  description String?
  isActive    Boolean   @default(true)
  
  // Specification template (JSON schema defining required/optional specs)
  specTemplate Json?    // {voltage: {type: "select", options: ["48V", "51V"], required: true}, ...}
  
  // Relationships
  models      ProductModel[]
  items       Item[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  @@index([deletedAt])
}

model Company {
  id           String    @id @default(uuid())
  name         String    @unique // "Vision", "Sacred Sun", "Narada", "Vertiv"
  code         String?   @unique
  contactPerson String?
  email        String?
  phone        String?
  address      String?
  website      String?
  
  // Relationships
  models       ProductModel[]
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  
  @@index([deletedAt])
}

model ProductModel {
  id             String    @id @default(uuid())
  name           String    // "V-LFP48100", "SLSIFP48100A", "R48-3000e3"
  code           String    @unique
  description    String?
  
  // Relationships
  categoryId     String
  category       ProductCategory @relation(fields: [categoryId], references: [id])
  companyId      String
  company        Company         @relation(fields: [companyId], references: [id])
  
  items          Item[]
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  
  @@index([categoryId])
  @@index([companyId])
  @@index([deletedAt])
  @@unique([name, companyId])
}

// ==================== INVENTORY MANAGEMENT ====================

model Item {
  id             String    @id @default(uuid())
  serialNumber   String    @unique // Mandatory, from box or custom format
  condition      String    @default("New") // "New", "Used"
  
  // Status tracking
  status         String    // "In Store", "In Hand", "In Lab", "Sold", "Delivered", "Handover"
  statusHistory  Json[]    // Array of {status, date, userId, notes}
  
  // Specifications (hybrid approach - JSON for flexibility)
  specifications Json?     // {voltage: "48V", cells: 16, bms: "Supported", ...}
  
  // Purchase info
  purchasePrice  Decimal?  @db.Decimal(10, 2)
  purchaseDate   DateTime?
  inboundDate    DateTime
  
  // Sale info (when sold/delivered)
  sellingPrice   Decimal?  @db.Decimal(10, 2)
  outboundDate   DateTime?
  
  // Client & Handover details
  clientName     String?
  clientCompany  String?
  clientNIC      String?
  clientPhone    String?
  clientEmail    String?
  clientAddress  String?
  
  // Handover details (when status = "Handover" or "Delivered")
  handoverTo     String?   // Transportation company or intermediary person
  handoverBy     String?   // Employee who handed over
  handoverById   String?
  handoverByUser User?     @relation("HandoverByUser", fields: [handoverById], references: [id])
  handoverDetails String?  // Bus number, contact details, etc.
  handoverDate   DateTime?
  
  // Relationships
  categoryId     String
  category       ProductCategory @relation(fields: [categoryId], references: [id])
  modelId        String
  model          ProductModel    @relation(fields: [modelId], references: [id])
  vendorId       String?
  vendor         Vendor?         @relation(fields: [vendorId], references: [id])
  warehouseId    String?
  warehouse      Warehouse?      @relation(fields: [warehouseId], references: [id])
  purchaseOrderId String?
  purchaseOrder  PurchaseOrder?  @relation(fields: [purchaseOrderId], references: [id])
  
  // Invoice relationship
  invoiceItems   InvoiceItem[]
  
  // User tracking
  createdById    String
  createdBy      User      @relation("CreatedByUser", fields: [createdById], references: [id])
  
  // Audit
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  
  @@index([status])
  @@index([categoryId])
  @@index([modelId])
  @@index([vendorId])
  @@index([warehouseId])
  @@index([clientPhone])
  @@index([deletedAt])
}

model Warehouse {
  id          String    @id @default(uuid())
  name        String    @unique
  code        String    @unique
  address     String?
  contactPerson String?
  phone       String?
  isActive    Boolean   @default(true)
  
  items       Item[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  @@index([deletedAt])
}

// ==================== VENDOR/SUPPLIER MANAGEMENT ====================

model Vendor {
  id              String    @id @default(uuid())
  name            String    @unique
  code            String    @unique
  contactPerson   String?
  email           String?
  phone           String?
  address         String?
  taxNumber       String?   // Tax registration number
  paymentTerms    String?   // "Net 30", "Due on Receipt", etc.
  
  // Financial
  openingBalance  Decimal   @default(0) @db.Decimal(10, 2)
  currentBalance  Decimal   @default(0) @db.Decimal(10, 2)
  
  // Relationships
  items           Item[]
  purchaseOrders  PurchaseOrder[]
  ledgerEntries   VendorLedger[]
  bills           Bill[]
  payments        VendorPayment[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  @@index([deletedAt])
}

// ==================== CUSTOMER MANAGEMENT ====================

model Customer {
  id              String    @id @default(uuid())
  name            String
  company         String?
  email           String?   
  phone           String    @unique
  address         String?
  nic             String?   // National ID
  taxNumber       String?
  
  // Financial
  creditLimit     Decimal   @default(0) @db.Decimal(10, 2)
  openingBalance  Decimal   @default(0) @db.Decimal(10, 2)
  currentBalance  Decimal   @default(0) @db.Decimal(10, 2)
  
  // Relationships
  invoices        Invoice[]
  ledgerEntries   CustomerLedger[]
  payments        Payment[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  @@index([phone])
  @@index([nic])
  @@index([deletedAt])
}

// ==================== FINANCIAL - GENERAL LEDGER ====================

model Account {
  id            String    @id @default(uuid())
  code          String    @unique // "1000", "1100", etc.
  name          String    // "Cash", "Accounts Receivable", etc.
  type          String    // "Asset", "Liability", "Income", "Expense", "Equity"
  parentId      String?
  parent        Account?  @relation("AccountHierarchy", fields: [parentId], references: [id])
  children      Account[] @relation("AccountHierarchy")
  
  // Balance
  openingBalance Decimal  @default(0) @db.Decimal(10, 2)
  currentBalance Decimal  @default(0) @db.Decimal(10, 2)
  
  // Relationships
  journalEntries JournalEntry[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  
  @@index([type])
  @@index([parentId])
  @@index([deletedAt])
}

model JournalEntry {
  id            String    @id @default(uuid())
  entryDate     DateTime
  reference     String?   // Invoice#, PO#, etc.
  description   String
  
  // Double entry
  accountId     String
  account       Account   @relation(fields: [accountId], references: [id])
  debit         Decimal   @default(0) @db.Decimal(10, 2)
  credit        Decimal   @default(0) @db.Decimal(10, 2)
  
  // Source tracking
  sourceType    String?   // "Invoice", "Bill", "Payment", "Manual"
  sourceId      String?   // Reference to source document
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  
  @@index([accountId])
  @@index([entryDate])
  @@index([sourceType, sourceId])
  @@index([deletedAt])
}

// ==================== PURCHASE MANAGEMENT ====================

model PurchaseOrder {
  id            String    @id @default(uuid())
  poNumber      String    @unique
  orderDate     DateTime
  expectedDate  DateTime?
  status        String    @default("Draft") // "Draft", "Sent", "Partial", "Completed", "Cancelled"
  
  // Financial
  subtotal      Decimal   @db.Decimal(10, 2)
  taxAmount     Decimal   @default(0) @db.Decimal(10, 2)
  total         Decimal   @db.Decimal(10, 2)
  
  // Relationships
  vendorId      String
  vendor        Vendor    @relation(fields: [vendorId], references: [id])
  items         Item[]
  bills         Bill[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  
  @@index([vendorId])
  @@index([status])
  @@index([orderDate])
  @@index([deletedAt])
}

model Bill {
  id            String    @id @default(uuid())
  billNumber    String    @unique
  billDate      DateTime
  dueDate       DateTime?
  status        String    @default("Unpaid") // "Unpaid", "Partial", "Paid"
  
  // Financial
  subtotal      Decimal   @db.Decimal(10, 2)
  taxAmount     Decimal   @default(0) @db.Decimal(10, 2)
  total         Decimal   @db.Decimal(10, 2)
  paidAmount    Decimal   @default(0) @db.Decimal(10, 2)
  
  // Relationships
  vendorId      String
  vendor        Vendor    @relation(fields: [vendorId], references: [id])
  purchaseOrderId String?
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  payments      VendorPayment[]
  ledgerEntries VendorLedger[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  
  @@index([vendorId])
  @@index([status])
  @@index([billDate])
  @@index([deletedAt])
}

// ==================== SALES & INVOICING ====================

model Invoice {
  id            String    @id @default(uuid())
  invoiceNumber String    @unique
  invoiceDate   DateTime
  dueDate       DateTime
  status        String    @default("Draft") // "Draft", "Sent", "Partial", "Paid", "Overdue", "Cancelled"
  
  // Financial
  subtotal      Decimal   @db.Decimal(10, 2)
  discountType  String?   // "Percentage", "Fixed"
  discountValue Decimal   @default(0) @db.Decimal(10, 2)
  taxRate       Decimal   @default(0) @db.Decimal(5, 2)
  taxAmount     Decimal   @default(0) @db.Decimal(10, 2)
  total         Decimal   @db.Decimal(10, 2)
  paidAmount    Decimal   @default(0) @db.Decimal(10, 2)
  
  // Terms
  terms         String?   @db.Text
  notes         String?   @db.Text
  
  // Installment support
  hasInstallment Boolean  @default(false)
  installmentPlan InstallmentPlan?
  
  // Relationships
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  items         InvoiceItem[]
  payments      Payment[]
  ledgerEntries CustomerLedger[]
  
  // User tracking
  createdById   String
  createdBy     User      @relation("CreatedByUser", fields: [createdById], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  voidReason    String?
  
  @@index([customerId])
  @@index([status])
  @@index([invoiceDate])
  @@index([deletedAt])
}

model InvoiceItem {
  id          String    @id @default(uuid())
  quantity    Int       @default(1)
  unitPrice   Decimal   @db.Decimal(10, 2)
  total       Decimal   @db.Decimal(10, 2)
  description String?
  
  // Relationships
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  itemId      String
  item        Item      @relation(fields: [itemId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([invoiceId])
  @@index([itemId])
}

// ==================== PAYMENT MANAGEMENT ====================

model Payment {
  id            String    @id @default(uuid())
  paymentNumber String    @unique
  paymentDate   DateTime
  amount        Decimal   @db.Decimal(10, 2)
  method        String    // "Cash", "Bank Transfer", "Cheque"
  reference     String?   // Cheque number, transaction ID, etc.
  notes         String?
  
  // Relationships
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  invoiceId     String?
  invoice       Invoice?  @relation(fields: [invoiceId], references: [id])
  installmentId String?
  installment   Installment? @relation(fields: [installmentId], references: [id])
  
  // User tracking
  recordedById  String
  recordedBy    User      @relation("RecordedByUser", fields: [recordedById], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  
  @@index([customerId])
  @@index([invoiceId])
  @@index([paymentDate])
  @@index([deletedAt])
}

model VendorPayment {
  id            String    @id @default(uuid())
  paymentNumber String    @unique
  paymentDate   DateTime
  amount        Decimal   @db.Decimal(10, 2)
  method        String    // "Cash", "Bank Transfer", "Cheque"
  reference     String?
  notes         String?
  
  // Relationships
  vendorId      String
  vendor        Vendor    @relation(fields: [vendorId], references: [id])
  billId        String?
  bill          Bill?     @relation(fields: [billId], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  
  @@index([vendorId])
  @@index([billId])
  @@index([paymentDate])
  @@index([deletedAt])
}

// ==================== INSTALLMENT MANAGEMENT ====================

model InstallmentPlan {
  id              String    @id @default(uuid())
  totalAmount     Decimal   @db.Decimal(10, 2)
  downPayment     Decimal   @default(0) @db.Decimal(10, 2)
  numberOfInstallments Int
  intervalType    String    // "Monthly", "Weekly", "Quarterly"
  startDate       DateTime
  
  // Relationships
  invoiceId       String    @unique
  invoice         Invoice   @relation(fields: [invoiceId], references: [id])
  installments    Installment[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([invoiceId])
}

model Installment {
  id            String    @id @default(uuid())
  installmentNumber Int
  dueDate       DateTime
  amount        Decimal   @db.Decimal(10, 2)
  paidAmount    Decimal   @default(0) @db.Decimal(10, 2)
  status        String    @default("Pending") // "Pending", "Partial", "Paid", "Overdue"
  paidDate      DateTime?
  
  // Late payment
  lateCharges   Decimal   @default(0) @db.Decimal(10, 2)
  
  // Relationships
  planId        String
  plan          InstallmentPlan @relation(fields: [planId], references: [id])
  payments      Payment[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([planId])
  @@index([status])
  @@index([dueDate])
}

// ==================== LEDGER TABLES ====================

model CustomerLedger {
  id            String    @id @default(uuid())
  entryDate     DateTime
  description   String
  debit         Decimal   @default(0) @db.Decimal(10, 2)
  credit        Decimal   @default(0) @db.Decimal(10, 2)
  balance       Decimal   @db.Decimal(10, 2)
  
  // Relationships
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  invoiceId     String?
  invoice       Invoice?  @relation(fields: [invoiceId], references: [id])
  
  createdAt     DateTime  @default(now())
  
  @@index([customerId])
  @@index([entryDate])
}

model VendorLedger {
  id            String    @id @default(uuid())
  entryDate     DateTime
  description   String
  debit         Decimal   @default(0) @db.Decimal(10, 2)
  credit        Decimal   @default(0) @db.Decimal(10, 2)
  balance       Decimal   @db.Decimal(10, 2)
  
  // Relationships
  vendorId      String
  vendor        Vendor    @relation(fields: [vendorId], references: [id])
  billId        String?
  bill          Bill?     @relation(fields: [billId], references: [id])
  
  createdAt     DateTime  @default(now())
  
  @@index([vendorId])
  @@index([entryDate])
}

// ==================== TAX MANAGEMENT ====================

model TaxConfiguration {
  id            String    @id @default(uuid())
  name          String    @unique // "GST", "VAT"
  rate          Decimal   @db.Decimal(5, 2)
  isActive      Boolean   @default(true)
  applicableOn  String[]  // Array of category IDs
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}